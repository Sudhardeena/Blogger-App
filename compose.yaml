# define the services/containers to be run
services:
  # define the client service
  # we can use any name for the service. A standard naming convention is to use "web" for the frontend
  web:
    # we use depends_on to specify that service depends on another service
    # in this case, we specify that the web depends on the api service
    # this means that the api service will be started before the web service
    depends_on:
      - api
    # specify the build context for the web service
    # this is the directory where the Dockerfile for the web service is located
    build: ./client
    # specify the ports to expose for the web service
    # the first number is the port on the host machine
    # the second number is the port inside the container
    ports:
      - 5173:5173

    # this is for docker compose watch mode
    # anything mentioned under develop will be watched for changes by docker compose watch and it will perform the action mentioned
    develop:
      # we specify the files to watch for changes
      watch:
        # it'll watch for changes in package.json and package-lock.json and rebuild the container if there are any changes
        - path: ./client/package.json
          action: rebuild
        - path: ./client/package-lock.json
          action: rebuild
        # it'll watch for changes in the client directory and sync the changes with the container real time
        - path: ./client
          target: /app
          action: sync

  # define the api service/container
  api:
    # specify the build context for the api service
    build: ./api

    # specify the ports to expose for the api service
    # the first number is the port on the host machine
    # the second number is the port inside the container
    ports:
      - 8000:8000

    #persisting data inside the database and uploads files across containers
    volumes:
      - ./api/BlogDatabase.db:/app/BlogDatabase.db
      - ./api/uploads:/app/uploads

    # establish docker compose watch mode for the api service
    develop:
      # specify the files to watch for changes
      watch:
        # it'll watch for changes in package.json and package-lock.json and rebuild the container and image if there are any changes
        - path: ./api/package.json
          action: rebuild
        - path: ./api/package-lock.json
          action: rebuild

        # it'll watch for changes in the api directory and sync the changes with the container real time
        - path: ./api
          target: /app
          action: sync
# define the volumes to be used by the services
# volumes:
#   blogs:
